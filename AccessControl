// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AccessControl {
    // Struct to store file access details
    struct FileAccess {
        address owner; // Owner of the file
        mapping(address => bool) allowedUsers; // Users with access to the file
    }

    // Mapping to store file access details (fileHash => FileAccess)
    mapping(string => FileAccess) private fileAccessMap;

    // Event to log access changes
    event AccessGranted(string indexed fileHash, address indexed user);
    event AccessRevoked(string indexed fileHash, address indexed user);

    // Modifier to restrict access to file owner
    modifier onlyOwner(string memory fileHash) {
        require(
            fileAccessMap[fileHash].owner == msg.sender,
            "Only the file owner can perform this action"
        );
        _;
    }

    // Function to set the file owner (called when a file is uploaded)
    function setFileOwner(string memory fileHash, address owner) public {
        require(
            fileAccessMap[fileHash].owner == address(0),
            "File owner already set"
        );
        fileAccessMap[fileHash].owner = owner;
    }

    // Function to grant access to a user
    function grantAccess(string memory fileHash, address user) public onlyOwner(fileHash) {
        require(
            !fileAccessMap[fileHash].allowedUsers[user],
            "User already has access"
        );
        fileAccessMap[fileHash].allowedUsers[user] = true;
        emit AccessGranted(fileHash, user);
    }

    // Function to revoke access from a user
    function revokeAccess(string memory fileHash, address user) public onlyOwner(fileHash) {
        require(
            fileAccessMap[fileHash].allowedUsers[user],
            "User does not have access"
        );
        fileAccessMap[fileHash].allowedUsers[user] = false;
        emit AccessRevoked(fileHash, user);
    }

    // Function to check if a user has access to a file
    function hasAccess(string memory fileHash, address user) public view returns (bool) {
        return fileAccessMap[fileHash].allowedUsers[user];
    }
}
